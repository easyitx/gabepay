import { config } from 'dotenv';
config();
import { Injectable, Logger } from '@nestjs/common';
import TelegramBot from 'node-telegram-bot-api';

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private readonly bot: TelegramBot;
  private readonly botToken: string = process.env.TELEGRAM_BOT_TOKEN || '';

  constructor() {
    if (!this.botToken) {
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
    const botToken = this.botToken;
    if (botToken) {
      try {
        this.bot = new TelegramBot(botToken, { polling: true });
        this.setupBot();
      } catch (error) {
        this.logger.error('Failed to initialize Telegram bot', error);
      }
    }
  }

  private setupBot(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      this.sendMainMenu(chatId);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    this.bot.on('callback_query', (callbackQuery) => {
      const message = callbackQuery.message;
      if (!message) return;
      const data = callbackQuery.data;

      if (data === 'replenish') {
        this.handleReplenishButton(message.chat.id);
      } else if (data === 'back_to_main') {
        this.sendMainMenu(message.chat.id);
      }

      // –û—Ç–≤–µ—Ç –Ω–∞ callback_query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
      this.bot.answerCallbackQuery(callbackQuery.id).catch((error) => {
        this.logger.error('Error answering callback query', error);
      });
    });

    this.logger.log('Telegram bot setup completed');
  }

  private sendMainMenu(chatId: number): void {
    const menuText = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ steam!

–ù–∏–∂–µ –∫–æ–º–∏—Å—Å–∏–∏ —á–µ–º —É –Ω–∞—Å –Ω–µ—Ç –Ω–∏–≥–¥–µ!
–í—Å–µ–≥–æ 2% –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!

1. –°–æ–∑–¥–∞–π –∫–æ—à–µ–ª–µ–∫ Cashinout –∏ –ø–æ–ø–æ–ª–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É!
2. –ù–∞ gabepay.ru –≤—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥ Cashinout –∏ –ø–æ–ø–æ–ª–Ω—è–π steam —Å –ª—É—á—à–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞ —Ä—ã–Ω–∫–µ!
`;

    const menuOptions: TelegramBot.SendMessageOptions = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å steam',
              callback_data: 'replenish',
            },
          ],
          [
            {
              text: 'ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ Cashinout',
              url: 'https://t.me/Cashinout_bot?start=194805',
            },
          ],
        ],
      },
      parse_mode: 'HTML',
    };

    this.bot.sendMessage(chatId, menuText, menuOptions).catch((error) => {
      this.logger.error('Error sending main menu', error);
    });
  }

  private handleReplenishButton(chatId: number): void {
    const websiteUrl = 'https://gabepay.ru';

    const messageText = `–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:`;

    const buttonOptions: TelegramBot.SendMessageOptions = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç gabepay',
              url: websiteUrl,
            },
          ],
          [
            {
              text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
              callback_data: 'back_to_main',
            },
          ],
        ],
      },
      parse_mode: 'HTML',
    };

    this.bot.sendMessage(chatId, messageText, buttonOptions).catch((error) => {
      this.logger.error('Error handling replenish button', error);
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  public handleMessage(msg: TelegramBot.Message): void {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === '–ú–µ–Ω—é' || text === '–º–µ–Ω—é') {
      this.sendMainMenu(chatId);
    }
  }
}